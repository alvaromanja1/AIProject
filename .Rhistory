fitness = function(ind,distancias){
for(i in 1:long){
longTotal = sum(distancias[ind,])
return(longTotal)
}
}
fitness(3,distancias)
fitness(1,distancias)
#Si recibe 2 5 6 27 .. sumar distancia entre 2 y 5  + 5 y 6 + 6 y 27 + ultima y 2
fitness = function(ind,distancias){
for(i in 1:long){
longTotal = distancias[ind,i]+distancias[ind,i+1]
return(longTotal)
}
}
fitness(1,distancias)
#Si recibe 2 5 6 27 .. sumar distancia entre 2 y 5  + 5 y 6 + 6 y 27 + ultima y 2
fitness = function(ind,distancias){
for(i in 1:29){
longTotal = distancias[ind,i]+distancias[ind,i+1]
return(longTotal)
}
}
fitness(1,distancias)
#Si recibe 2 5 6 27 .. sumar distancia entre 2 y 5  + 5 y 6 + 6 y 27 + ultima y 2
fitness = function(ind,distancias){
for(i in 1:long){
longTotal += distancias[ind,i]+distancias[ind,i+1]
return(longTotal)
}
}
#Si recibe 2 5 6 27 .. sumar distancia entre 2 y 5  + 5 y 6 + 6 y 27 + ultima y 2
fitness = function(ind,distancias){
for(i in 1:long){
longTotal = longTotal + (distancias[ind,i]+distancias[ind,i+1])
return(longTotal)
}
}
fitness(1,distancias)
#Si recibe 2 5 6 27 .. sumar distancia entre 2 y 5  + 5 y 6 + 6 y 27 + ultima y 2
longTotal=0
fitness = function(ind,distancias){
for(i in 1:long){
longTotal = longTotal + (distancias[ind,i]+distancias[ind,i+1])
return(longTotal)
}
}
fitness(1,distancias)
fitness = function(ind,distancias){
for(i in 1:long){
longTotal = longTotal + (distancias[ind,i]+distancias[ind,i+1])
return(longTotal)
}
}
fitness(1,distancias)
# Entrega:
# Fecha:
##---------------------------------------------------------------------------
# 1. Asegúrese de incluir, junto a esta plantilla, cualquier fichero necesario
#    para su ejecución, incluidos datasets
# 2. Si utiliza una función de un determinado paquete, no olvide incluir la
#    correspondiente llamada a la función "library()"
# 3. No olvide comentar el código, en especial aquellos comandos no-triviales
#    (recuerda que parte de la calificación depende de la limpieza del código)
#---------------------------------------------------------------------------
rm(list = ls());cat("\014")
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
library(GGally)
library(ggplot2)
library(gridExtra)
problema = 'bayg29.txt';
puntos = read.table(problema);
long = nrow(puntos);
ggplot(puntos, aes(x = V1, y = V2)) + geom_point() +
geom_label(label = as.character(1:long))
# Paso 1: Crear una matriz llamada distancias, de longxlong elementos. En cada
# posición debe almacenar la distancia entre 2 ciudades
# distancia euclídea entre puntos[i,] y puntos[j,]
distancias = matrix(0,long,long);
for (i in 1:long){
for (j in 1:long){
distancias[i,j] = abs(puntos[i,1]-puntos[j,2]);
}
}
fitness = function(ind,distancias){
for(i in 1:long){
longTotal = longTotal + (distancias[ind,i]+distancias[ind,i+1])
return(longTotal)
}
}
fitness(1,distancias)
fitness = function(ind,distancias){
for(i in 1:long){
longTotal =  distancias[ind,i]+distancias[ind,i+1]
return(longTotal)
}
}
fitness(1,distancias)
fitness
fitness = function(ind,distancias){
for(i in 1:long){
longTotal
longTotal =  longTotal + (distancias[ind,i]+distancias[ind,i+1])
return(longTotal)
}
}
fitness(1,distancias)
fitness = function(ind,distancias){
for(i in 1:long){
longTotal =  longTotal + (distancias[ind,i]+distancias[ind,i+1])
return(longTotal)
}
}
fitness(1,distancias)
#Si recibe 2 5 6 27 .. sumar distancia entre 2 y 5  + 5 y 6 + 6 y 27 + ultima y 2
longTotal = 0
fitness = function(ind,distancias){
for(i in 1:long){
longTotal =  longTotal + (distancias[ind,i]+distancias[ind,i+1])
return(longTotal)
}
}
fitness(1,distancias)
fitness = function(ind,distancias){
for(i in 1:long){
longTotal =  longTotal + (distancias[ind,i]+distancias[ind,i+1])
return(longTotal)
}
}
fitness(1,distancias)
fitness = function(ind,distancias){
for(i in 1:long){
longTotal =  longTotal + (distancias[ind,i]+distancias[ind,i+1])
return(longTotal)
}
}
fitness = function(ind,distancias){
for(i in 1:long){
longTotal =  longTotal + (distancias[ind,i]+distancias[ind,i+1])
return(longTotal)
}
}
fitness = function(ind,distancias){
for(i in 1:long){
longTotal =  longTotal + (distancias[ind,i]+distancias[ind,i+1])
return(longTotal)
}
}
fitness(1,distancias)
#Si recibe 2 5 6 27 .. sumar distancia entre 2 y 5  + 5 y 6 + 6 y 27 + ultima y 2
longTotal = 0
fitness = function(ind,distancias){
for(i in 1:long){
longTotal =  longTotal + (distancias[ind,i]+distancias[ind,i+1])
#return(longTotal)
}
}
fitness(1,distancias)
#Si recibe 2 5 6 27 .. sumar distancia entre 2 y 5  + 5 y 6 + 6 y 27 + ultima y 2
longTotal = 0
fitness = function(ind,distancias){
for(i in 1:long){
longTotal =  longTotal + (distancias[ind,i]+distancias[ind,i+1])
return(longTotal)
}
}
fitness(1,distancias)
# Con los siguientes dos comandos limpiamos el entorno de trabajo y la consola
rm(list = ls())
cat("\014")
# Otro punto es establecer el working directory, con este comando hacemos que
# éste sea igual a aquél en el que se encuentra el script
# Si es tu 1ª vez con R, tendrás que instalar el paquete rstudioapim
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#Librerías
library(frbs)
library(ggplot2)
library(scales)
library(SmarterPoland)
library(htmltools)
library(rlist)
install.packages("rlist")
install.packages("SmarterPoland")
#Librerías
library(frbs)
library(ggplot2)
library(scales)
library(SmarterPoland)
library(htmltools)
library(rlist)
#leer los csv's
weather = read.csv("csv/Tiempo Madrid.csv")
weather = read.csv("csv/Tiempo Madrid.csv")[,c(1,2,4,10,13,21,23)]
presionBaja = c(2,986, 1003, 1010, NA) #Aquí se ha decidido empezar por 0, ya que es el mínimo valor, luego que a partir de 1.25 empieze a dejar de ser una aplicación con rating "bajo", para que así, poco antes de la mitad deje de ser una aplicación con rating "bajo"
presionMedia = c(4, 1007, 1012, 1015 , 1019)#Aquí empezamos por 1.75 para que haya más margen hasta el 2.5 (que sería la mitad exacta), luego a partir de 3.25 consideramos que empieza a dejar de ser una app "normal", hasta llegar a 4
presionAlta = c(3,1017, 1028, 1043, NA)#Por último, consideramos que una app empieza a ser el rating "alto" a partir de 3.5, hasta 4.5, donde de ahí en adelante (hasta 5), se puede considerar una App con rating "alto"
tempBaja = c(2, -3 , 5 , 12 , NA) #Aquí empezamos por 9, ya que es el mínimo, empezamos a reducir su pertenencia a partir de 16, y consideramos que dejan de ser "pocos" los dispositivos soportados a partur de 25
tempMedia = c(4,10, 15, 18, 22) #Aquí empezamos a considerar como "algunos" las apps con valor de 23, hasta 35, donde empeiezan ya a ser miembros de "pleno derecho" al conjunto (se hace así ya que hay grandes saltos entre dispositivos conectados). Por último, se considera que a partir de 37, empiezan a estar menos en el medio, hasta llegar a 40
tempAlta = c(3,20, 26, 31, NA)
humedadBaja = c(2, 16 , 24 , 35 , NA)
humedadMedia = c(4,33, 45, 62, 70)
humedadAlta = c(3,65, 78, 99, NA)
varinp.mf = cbind(tempBaja,tempMedia,tempAlta,humedadBaja,humedadMedia,humedadAlta,presionBaja,presionMedia,presionAlta)
num.fvalinput = matrix(c(3,3,3), nrow=1)
varinput1 = c("Baja", "Media", "Alta")
varinput2 = c("Poca", "Algo", "Mucha")
names.varinput = c(varinput1, varinput3,varinput2)
varinput3 = c("Reducida","Intermedia","Grande")
range.data = matrix(c( -3, 31, 16, 99, 986, 1043, 0, 100), nrow = 2)
#Temp minima historia bilbao: -6, Max: 41
type.defuz = "COG"
type.tnorm = "MIN"
type.snorm = "MAX"
type.implication.func = "MIN"
name = "Probabilidad de lluvia" #Le damos nombre
colnames.var = c("Temperatura", "Presion","Humedad", "Resultado")
probBaja = c(2,0, 20, 40, NA)#Consideramos que una app es "mala" si tiene entre 0 y 20 puntos, a partir de la cual pensamos que deja de ser tam mala, hasta llegar a la valoración de 40
newdata = read.csv("csv/Tiempo Madrid.csv")[,c(4,10,13)]
type.model = "MAMDANI" #Indicamos el tipo de modelo que vamos a usar
probAlta = c(3,65, 85, 100, NA)
num.fvaloutput = matrix(c(3), nrow = 1)
probMedia = c(4,30, 45, 55, 70) #Consideramos que una app empieza a ser "regular" a partir de los 30 puntos, hasta llegar a los 45 puntos; y empieza a dejar de ser "regular" a partir de los 55, hasta llegar a los 70 puntos
varoutput1 = c("Baja", "Media", "Alta") #Indicamos sus nombres
varout.mf = cbind(probBaja,probMedia,probAlta)
#Temperatura: -> Baja, Media, Alta
#Humedad: -> Reducida, Intermedia, Grande
#Humedad: -> Poca, Algo, Mucha
rule = matrix( c("Baja", "and", "Grande" , "and" , "Poca","->", "Alta",
"Baja", "and","Grande" , "and" , "Algo","->", "Alta",
"Baja", "and","Grande" , "and" , "Mucha","->", "Alta",
"Baja", "and","Intermedia" , "and" , "Poca","->", "Alta",
"Baja", "and","Intermedia" , "and" , "Algo","->", "Alta",
"Baja", "and","Intermedia", "and"  , "Mucha","->", "Media",
"Baja", "and","Reducida" , "and" , "Poca","->", "Alta",
"Baja", "and","Reducida" , "and" , "Algo","->", "Media",
"Baja", "and","Reducida", "and"  , "Mucha","->", "Media",
"Media", "and","Grande" , "and" , "Poca","->", "Alta",
"Media", "and","Grande" , "and" , "Algo","->", "Alta",
"Media", "and","Grande" , "and" , "Mucha","->", "Media",
"Media", "and","Intermedia", "and"  , "Poca","->", "Alta",
"Media", "and","Intermedia" , "and" , "Algo","->", "Media",
"Media", "and","Intermedia" , "and" , "Mucha","->", "Media",
"Media", "and","Reducida"  , "and", "Poca","->", "Media",
"Media", "and","Reducida" , "and" , "Algo","->", "Media",
"Media", "and","Reducida" , "and" , "Mucha","->", "Baja",
"Alta", "and","Grande", "and"  , "Poca","->", "Media",
"Alta", "and","Grande", "and"  , "Algo","->", "Media",
"Alta", "and","Grande" , "and" , "Mucha","->", "Baja",
"Alta", "and","Intermedia" , "and" , "Poca","->", "Media",
"Alta", "and","Intermedia" , "and" , "Algo","->", "Baja",
"Alta", "and","Intermedia" , "and" , "Mucha","->", "Baja",
"Alta", "and","Reducida" , "and" , "Poca","->", "Baja",
"Alta", "and","Reducida" , "and" , "Algo","->", "Baja",
"Alta", "and","Reducida", "and"  , "Mucha","->", "Baja"
), nrow = 27, byrow = TRUE)
sistema = frbs.gen(range.data, num.fvalinput, names.varinput,
num.fvaloutput, varout.mf, varoutput1, rule,
varinp.mf, type.model, type.defuz, type.tnorm,
type.snorm, func.tsk = NULL, colnames.var, type.implication.func, name)
plotMF(sistema)#También, por simple hecho didáctico, mostramos cómo quedan nuestros conjuntos de entrada y el de salida
varinput1 = c("Baja", "Media", "Alta")
varinput2 = c("Poca", "Algo", "Mucha")
varinput3 = c("Reducida","Intermedia","Grande")
names.varinput = c(varinput1, varinput3,varinput2)
sistema = frbs.gen(range.data, num.fvalinput, names.varinput,
num.fvaloutput, varout.mf, varoutput1, rule,
varinp.mf, type.model, type.defuz, type.tnorm,
type.snorm, func.tsk = NULL, colnames.var, type.implication.func, name)
plotMF(sistema)#También, por simple hecho didáctico, mostramos cómo quedan nuestros conjuntos de entrada y el de salida
res = predict(sistema, newdata)$predicted.val
newdata$probabilidad = res
newdata$id = seq.int(nrow(weather))
result = merge(weather, newdata, by.x = 'id', by.y = 'id')
result = result[,c(1,2,3,4,5,6,7,11)]
forecast = getWeatherForecast("", city='Bilbao')
forecast = getWeatherForecast("188cbc6cc1f993a4f2e4c1b7cce0ff65", city='Bilbao')
View(forecast)
realTemp = forecast[[2]]
realTemp = realTemp[,c(1,2,4,5,6,10,11,19)]
realTemp[6] = realTemp[6]*100
realTemp = realTemp[c(8,6,7)]
res = predict(sistema, realTemp)$predicted.val
realTemp$probabilidad = res
View(realTemp)
forecast = getWeatherForecast("188cbc6cc1f993a4f2e4c1b7cce0ff65", city='Bilbao')
View(forecast)
realTemp = forecast[[2]]
View(realTemp)
View(forecast)
realTemp = realTemp[,c(1,2,4,5,6,10,11,19)]
realTemp = forecast[[2]]
realTemp = realTemp[,c(1,2,4,5,6,10,11,19)]
forecast = getWeatherForecast("188cbc6cc1f993a4f2e4c1b7cce0ff65", city='Bilbao')
realTemp = forecast[[2]]
realTemp = realTemp[,c(1,2,4,5,6,10,11,19)]
forecast = getWeatherForecast("188cbc6cc1f993a4f2e4c1b7cce0ff65", city='Bilbao')
realTemp = forecast[[2]]
realTemp = realTemp[,c(1,2,4,5,6,10,11,19)]
realTemp = forecast[[2]]
realTemp = realTemp[,c(1,2,4,5,6,10,11,19)]
forecast = getWeatherForecast("188cbc6cc1f993a4f2e4c1b7cce0ff65", city='Bilbao')
realTemp = forecast[[2]]
realTemp = realTemp[,c(1,2,4,5,6,10,11,19)]
realTemp[6] = realTemp[6]*100
realTemp = realTemp[c(8,6,7)]
View(realTemp)
res = predict(sistema, realTemp)$predicted.val
View(res)
realTemp$probabilidad = res
View(realTemp)
dailyTemp = forecast[[3]]
View(dailyTemp)
View(realTemp)
View(realTemp)
dailyTemp = dailyTemp[,c(1,5,11,12)]
View(dailyTemp)
res = predict(sistema, dailyTemp)$predicted.val
dailyTemp$probabilidad = res
dailyTemp = dailyTemp[,c(5,11,12)]
dailyTemp = dailyTemp[,c(5,11,12)]
dailyTemp = forecast[[3]]
dailyTemp = dailyTemp[,c(5,11,12)]
res = predict(sistema, dailyTemp)$predicted.val
dailyTemp$probabilidad = res
View(dailyTemp)
#Librerías
#library(frbs)
#library(ggplot2)
#library(scales)
#library(SmarterPoland)
#library(htmltools)
#library(rlist)
library(shiny)
shinyUI(pageWithSidebar(
# Application title
headerPanel("Weather forecast"),
# Sidebar with controls to select a dataset and specify the number
# of observations to view
sidebarPanel(
selectInput("dataset", "Choose a dataset:",
choices = c("rock", "pressure", "cars")),
numericInput("obs", "Number of observations to view:", 10)
),
# Show a summary of the dataset and an HTML table with the requested
# number of observations
mainPanel(
verbatimTextOutput("summary"),
tableOutput("view")
)
))
shinyUI(pageWithSidebar(
# Application title
headerPanel("Weather forecast"),
)
))
shinyUI(pageWithSidebar(
# Application title
headerPanel("Weather forecast"),
))
shinyUI(pageWithSidebar(
# Application title
headerPanel("Weather forecast"),
sidebarPanel(
selectInput("dataset", "Choose a dataset:",
choices = c("rock", "pressure", "cars")),
numericInput("obs", "Number of observations to view:", 10)
)
))
shinyUI(pageWithSidebar(
# Application title
headerPanel("Weather forecast"),
# Sidebar with a slider input for number of observations
sidebarPanel(
sliderInput("obs",
"Number of observations:",
min = 1,
max = 1000,
value = 500)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
))
runApp()
runApp()
dailyTemp = forecast[[3]]
dailyTemp = dailyTemp[,c(5,11,12)]
res = predict(sistema, dailyTemp)$predicted.val
# Con los siguientes dos comandos limpiamos el entorno de trabajo y la consola
rm(list = ls())
cat("\014")
# Otro punto es establecer el working directory, con este comando hacemos que
# éste sea igual a aquél en el que se encuentra el script
# Si es tu 1ª vez con R, tendrás que instalar el paquete rstudioapim
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#Librerías
library(frbs)
library(ggplot2)
library(scales)
library(SmarterPoland)
library(htmltools)
library(rlist)
#leer los csv's
weather = read.csv("csv/Tiempo Madrid.csv")
weather = read.csv("csv/Tiempo Madrid.csv")[,c(1,2,4,10,13,21,23)]
presionBaja = c(2,986, 1003, 1010, NA) #Aquí se ha decidido empezar por 0, ya que es el mínimo valor, luego que a partir de 1.25 empieze a dejar de ser una aplicación con rating "bajo", para que así, poco antes de la mitad deje de ser una aplicación con rating "bajo"
presionMedia = c(4, 1007, 1012, 1015 , 1019)#Aquí empezamos por 1.75 para que haya más margen hasta el 2.5 (que sería la mitad exacta), luego a partir de 3.25 consideramos que empieza a dejar de ser una app "normal", hasta llegar a 4
presionAlta = c(3,1017, 1028, 1043, NA)#Por último, consideramos que una app empieza a ser el rating "alto" a partir de 3.5, hasta 4.5, donde de ahí en adelante (hasta 5), se puede considerar una App con rating "alto"
tempBaja = c(2, -3 , 5 , 12 , NA) #Aquí empezamos por 9, ya que es el mínimo, empezamos a reducir su pertenencia a partir de 16, y consideramos que dejan de ser "pocos" los dispositivos soportados a partur de 25
tempMedia = c(4,10, 15, 18, 22) #Aquí empezamos a considerar como "algunos" las apps con valor de 23, hasta 35, donde empeiezan ya a ser miembros de "pleno derecho" al conjunto (se hace así ya que hay grandes saltos entre dispositivos conectados). Por último, se considera que a partir de 37, empiezan a estar menos en el medio, hasta llegar a 40
tempAlta = c(3,20, 26, 31, NA)
humedadBaja = c(2, 16 , 24 , 35 , NA)
humedadMedia = c(4,33, 45, 62, 70)
humedadAlta = c(3,65, 78, 99, NA)
varinp.mf = cbind(tempBaja,tempMedia,tempAlta,humedadBaja,humedadMedia,humedadAlta,presionBaja,presionMedia,presionAlta)
num.fvalinput = matrix(c(3,3,3), nrow=1)
varinput1 = c("Baja", "Media", "Alta")
varinput2 = c("Poca", "Algo", "Mucha")
varinput3 = c("Reducida","Intermedia","Grande")
names.varinput = c(varinput1, varinput3,varinput2)
range.data = matrix(c( -3, 31, 16, 99, 986, 1043, 0, 100), nrow = 2)
#Temp minima historia bilbao: -6, Max: 41
type.defuz = "COG"
type.tnorm = "MIN"
type.snorm = "MAX"
type.implication.func = "MIN"
type.model = "MAMDANI" #Indicamos el tipo de modelo que vamos a usar
name = "Probabilidad de lluvia" #Le damos nombre
newdata = read.csv("csv/Tiempo Madrid.csv")[,c(4,10,13)]
colnames.var = c("Temperatura", "Presion","Humedad", "Resultado")
probBaja = c(2,0, 20, 40, NA)#Consideramos que una app es "mala" si tiene entre 0 y 20 puntos, a partir de la cual pensamos que deja de ser tam mala, hasta llegar a la valoración de 40
probMedia = c(4,30, 45, 55, 70) #Consideramos que una app empieza a ser "regular" a partir de los 30 puntos, hasta llegar a los 45 puntos; y empieza a dejar de ser "regular" a partir de los 55, hasta llegar a los 70 puntos
probAlta = c(3,65, 85, 100, NA)
num.fvaloutput = matrix(c(3), nrow = 1)
varoutput1 = c("Baja", "Media", "Alta") #Indicamos sus nombres
varout.mf = cbind(probBaja,probMedia,probAlta)
#Temperatura: -> Baja, Media, Alta
#Humedad: -> Reducida, Intermedia, Grande
#Humedad: -> Poca, Algo, Mucha
rule = matrix( c("Baja", "and", "Grande" , "and" , "Poca","->", "Alta",
"Baja", "and","Grande" , "and" , "Algo","->", "Alta",
"Baja", "and","Grande" , "and" , "Mucha","->", "Alta",
"Baja", "and","Intermedia" , "and" , "Poca","->", "Alta",
"Baja", "and","Intermedia" , "and" , "Algo","->", "Alta",
"Baja", "and","Intermedia", "and"  , "Mucha","->", "Media",
"Baja", "and","Reducida" , "and" , "Poca","->", "Alta",
"Baja", "and","Reducida" , "and" , "Algo","->", "Media",
"Baja", "and","Reducida", "and"  , "Mucha","->", "Media",
"Media", "and","Grande" , "and" , "Poca","->", "Alta",
"Media", "and","Grande" , "and" , "Algo","->", "Alta",
"Media", "and","Grande" , "and" , "Mucha","->", "Media",
"Media", "and","Intermedia", "and"  , "Poca","->", "Alta",
"Media", "and","Intermedia" , "and" , "Algo","->", "Media",
"Media", "and","Intermedia" , "and" , "Mucha","->", "Media",
"Media", "and","Reducida"  , "and", "Poca","->", "Media",
"Media", "and","Reducida" , "and" , "Algo","->", "Media",
"Media", "and","Reducida" , "and" , "Mucha","->", "Baja",
"Alta", "and","Grande", "and"  , "Poca","->", "Media",
"Alta", "and","Grande", "and"  , "Algo","->", "Media",
"Alta", "and","Grande" , "and" , "Mucha","->", "Baja",
"Alta", "and","Intermedia" , "and" , "Poca","->", "Media",
"Alta", "and","Intermedia" , "and" , "Algo","->", "Baja",
"Alta", "and","Intermedia" , "and" , "Mucha","->", "Baja",
"Alta", "and","Reducida" , "and" , "Poca","->", "Baja",
"Alta", "and","Reducida" , "and" , "Algo","->", "Baja",
"Alta", "and","Reducida", "and"  , "Mucha","->", "Baja"
), nrow = 27, byrow = TRUE)
sistema = frbs.gen(range.data, num.fvalinput, names.varinput,
num.fvaloutput, varout.mf, varoutput1, rule,
varinp.mf, type.model, type.defuz, type.tnorm,
type.snorm, func.tsk = NULL, colnames.var, type.implication.func, name)
plotMF(sistema)#También, por simple hecho didáctico, mostramos cómo quedan nuestros conjuntos de entrada y el de salida
res = predict(sistema, newdata)$predicted.val
newdata$probabilidad = res
newdata$id = seq.int(nrow(weather))
result = merge(weather, newdata, by.x = 'id', by.y = 'id')
result = result[,c(1,2,3,4,5,6,7,11)]
forecast = getWeatherForecast("db543260d480e54760e1a9bf0232cefd", city='Madrid')
realTemp = forecast[[1]]
realTemp = realTemp[,c(1,2,4,5,6,10,11,19)]
realTemp[6] = realTemp[6]*100
realTemp = realTemp[c(8,6,7)]
res = predict(sistema, realTemp)$predicted.val
realTemp$probabilidad = res
View(realTemp)
realTemp = forecast[[1]]
View(realTemp)
dailyTemp = forecast[[3]]
dailyTemp = dailyTemp[,c(5,11,12)]
res = predict(sistema, dailyTemp)$predicted.val
dailyTemp$probabilidad = res
View(dailyTemp)
dailyTemp = forecast[[3]]
View(dailyTemp)
realTemp = forecast[[2]]
View(newdata)
forecast = getWeatherForecast("db543260d480e54760e1a9bf0232cefd", city='Madrid')
realTemp = forecast[[2]]
View(realTemp)
View(realTemp)
forecast = getWeatherForecast("db543260d480e54760e1a9bf0232cefd", city='Madrid')
forecast = getWeatherForecast("db543260d480e54760e1a9bf0232cefd", city='Madrid')
realTemp = forecast[[1]]
realTemp = realTemp[,c(1,2,4,5,6,10,11,19)]
realTemp[6] = realTemp[6]*100
realTemp2 = realTemp[c(8,6,7)]
res = predict(sistema, realTemp2)$predicted.val
realTemp2$probabilidad = res
View(realTemp2)
View(realTemp)

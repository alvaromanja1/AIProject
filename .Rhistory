View(m)
View(mat)
View(matrix)
View(toString)
ndisks = 4
nrods = 3
matrix = matrix(0:0,nrow=ndisks, ncol=nrods) #llenamos la matriz de ceros
for(i in 1: ndisks){ #recorremos las filas de la matriz desde 1 hasta num discos
for(j in 1: nrods){ #recorremos las columnas de la matriz desde 1 hasta num palos
if(state[j] == i){
matrix[j,i] <- j #insertamos en la posicion[j, i] el valor del disco
}
}
}
m=apply(matrix, 2, sort) #aplica una funci?n a los m?rgenes de una matriz; ordena
state <- c(1,1,1,1)
ndisks = 4
nrods = 3
matrix = matrix(0:0,nrow=ndisks, ncol=nrods) #llenamos la matriz de ceros
for(i in 1: ndisks){ #recorremos las filas de la matriz desde 1 hasta num discos
for(j in 1: nrods){ #recorremos las columnas de la matriz desde 1 hasta num palos
if(state[j] == i){
matrix[j,i] <- j #insertamos en la posicion[j, i] el valor del disco
}
}
}
m=apply(matrix, 2, sort) #aplica una funci?n a los m?rgenes de una matriz; ordena
print(m) #imprimimos la matriz
# Con los siguientes dos comandos limpiamos el entorno de trabajo y la consola
rm(list = ls())
cat("\014")
# Otro punto es establecer el working directory, con este comando hacemos que
# Ã©ste sea igual a aquÃ©l en el que se encuentra el script
# Si es tu 1Âª vez con R, tendrÃ¡s que instalar el paquete rstudioapi
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Comprobamos que estÃ¡ correcto
getwd()
# Con los siguientes dos comandos limpiamos el entorno de trabajo y la consola
rm(list = ls())
cat("\014")
install.packages("drat", repos="https://cran.rstudio.com")
drat:::addRepo("dmlc")
install.packages("mxnet")
install.packages("https://s3.ca-central-1.amazonaws.com/jeremiedb/share/mxnet/CPU/mxnet.zip", repos = NULL)
cran <- getOption("repos")
cran["dmlc"] <- "https://apache-mxnet.s3-accelerate.dualstack.amazonaws.com/R/CRAN/"
options(repos = cran)
install.packages("mxnet")
install.packages("mxnet")
cat("\014")
image_dir <- "C:\Users\usuario\Desktop\DEUSTO\MÁSTER\IA AVANZADA\PROYECTO\train"
image_dir = "C:\Users\usuario\Desktop\DEUSTO\MÁSTER\IA AVANZADA\PROYECTO\train"
image_dir = "...\\train"
image_dir = "C:\\Users\\usuario\\Desktop\\DEUSTO\\MÁSTER\\IA AVANZADA\\PROYECTO\\train"
source("https://bioconductor.org/biocLite.R")
biocLite("EBImage")
library(EBImage)
example_bike_image <- readImage(file.path(image_dir, "bike.jpg"))
example_bike_image <- readImage(file.path(image_dir, "bike.jpg"))
#Definimos el directorio donde tendremos los datasets de imagenes
image_dir <- "C:\\Users\\usuario\\Desktop\\DEUSTO\\MÁSTER\\IA AVANZADA\\PROYECTO\\train\\"
example_bike_image <- readImage(file.path(image_dir, "bike.jpg"))
#Definimos el directorio donde tendremos los datasets de imagenes
image_dir <- "C:\\Users\\usuario\\Desktop\\DEUSTO\\MÁSTER\\IA AVANZADA\\PROYECTO\\train"
example_bike_image <- readImage(file.path(image_dir, "bike.jpg"))
display(example_bike_image)
example_bike_image <- readImage(file.path(image_dir, "bike.jpg"))
#Definimos el directorio donde tendremos los datasets de imagenes
image_dir <- "...\\train"
example_bike_image <- readImage(file.path(image_dir, "bike.jpg"))
example_bike_image <- readImage(file.path(image_dir, "bike.jpg"))
#Definimos el directorio donde tendremos los datasets de imagenes
var dir <- rstudioapi::getActiveDocumentContext()$path;
#Definimos el directorio donde tendremos los datasets de imagenes
dir <- rstudioapi::getActiveDocumentContext()$path;
image_dir <- dir + "\\train"
image_dir <- "dir  "\train""
image_dir <- "dir  "train""
paste(dir, image_dir, sep="\")
dir_t <- paste(dir, image_dir, sep="\")
#Definimos el directorio donde tendremos los datasets de imagenes
dir <- rstudioapi::getActiveDocumentContext()$path;
image_dir <- "\\train"
dir_t <- paste(dir, image_dir, sep="\")
#Definimos el directorio donde tendremos los datasets de imagenes
dir <- rstudioapi::getActiveDocumentContext()$path;
image_dir <- "\\train"
dir_t <- paste(dir, image_dir, sep="")
# Con los siguientes dos comandos limpiamos el entorno de trabajo y la consola
rm(list = ls())
cat("\014")
#Definimos el directorio donde tendremos los datasets de imagenes
image_dir <- "C:\\Users\\usuario\\Desktop\\DEUSTO\\MÁSTER\\IA AVANZADA\\PROYECTO\\train"
#instalar paquete
source("https://bioconductor.org/biocLite.R")
biocLite("EBImage")
library(EBImage)
example_bike_image <- readImage(file.path(image_dir, "bike.jpg"))
example_bike_image <- readImage(file.path(image_dir, "\bike.jpg"))
example_bike_image <- readImage(file.path(image_dir, "/bike.jpg"))
example_bike_image <- readImage(file.path(image_dir, "..\bike.jpg"))
example_bike_image <- readImage(file.path(image_dir, "bike.jpg"))
img <- readJPEG(system.file("img", "Rlogo.jpg", package="jpeg"))
example_bike_image <- readImage(file.path(image_dir, "bike.jpg"))
#Definimos el directorio donde tendremos los datasets de imagenes
image_dir <- "C:\\Users\\usuario\\Desktop\\DEUSTO\\MÁSTER\\IA AVANZADA\\PROYECTO\\train/"
example_bike_image <- readImage(file.path(image_dir, "bike.jpg"))
#Definimos el directorio donde tendremos los datasets de imagenes
image_dir <- "C:\\Users\\usuario\\Desktop\\DEUSTO\\MÁSTER\\IA AVANZADA\\PROYECTO\\train\"
#instalar paquete
source("https://bioconductor.org/biocLite.R")
biocLite("EBImage")
#Definimos el directorio donde tendremos los datasets de imagenes
image_dir <- "C:\\Users\\usuario\\Desktop\\DEUSTO\\MÁSTER\\IA AVANZADA\\PROYECTO\\train\\"
example_bike_image <- readImage(file.path(image_dir, "bike.jpg"))
example_bike_image <- readImage(file.path(image_dir, "\bike.jpg"))
example_bike_image <- readImage(file.path(image_dir, "\bike.jpg"))
display(example_bike_image)
example_bike_image <- readImage(file.path(image_dir, "bike.jpg"))
#Definimos el directorio donde tendremos los datasets de imagenes
image_dir <- "C:\\Users\\usuario\\Desktop\\DEUSTO\\MÁSTER\\IA AVANZADA\\PROYECTO\\train"
example_bike_image <- readImage(file.path(image_dir, "bike.jpg"))
#instalar paquete
#source("https://bioconductor.org/biocLite.R")
#biocLite("EBImage")
#library(EBImage)
library("jpeg")
jj <- readJPEG("myfile.jpg",native=TRUE)
jj <- readJPEG("C:\Users\usuario\Desktop\DEUSTO\MÁSTER\IA AVANZADA\PROYECTO\train\bike.jpg",native=TRUE)
jj <- readJPEG("bike.jpg",native=TRUE)
jj <- readJPEG("bike.jpg",native=TRUE)
plot(0:1,0:1,type="n",ann=FALSE,axes=FALSE)
rasterImage(jj,0,0,1,1)
#instalar paquete
#source("https://bioconductor.org/biocLite.R")
#biocLite("EBImage")
library(EBImage)
example_bike_image <- readImage(file.path(image_dir, "bike.jpg"))
#Definimos el directorio donde tendremos los datasets de imagenes
image_dir <- "C:\\Users\\usuario\\Desktop\\DEUSTO\\MÁSTER\\IA AVANZADA\\PROYECTO\train"
example_bike_image <- readImage(file.path(image_dir, "bike.jpg"))
#Definimos el directorio donde tendremos los datasets de imagenes
image_dir <- "C:\\Users\\usuario\\Desktop\\DEUSTO\\MÁSTER\\IA AVANZADA\\PROYECTO\\train"
example_bike_image <- readImage(file.path(image_dir, "bike.jpg"))
example_bike_image <- readImage(file.path(image_dir, ".\bike.jpg"))
example_bike_image <- readImage(file.path(image_dir, "//bike.jpg"))
example_bike_image <- readImage(file.path(image_dir, "\/bike.jpg"))
example_bike_image <- readImage(file.path(image_dir, "\\bike.jpg"))
example_bike_image <- readImage(file.path(image_dir, "..\bike.jpg"))
example_bike_image <- readImage(file.path(image_dir, "..bike.jpg"))
#Definimos el directorio donde tendremos los datasets de imagenes
image_dir <- "C:\\Users\\usuario\\Desktop\\DEUSTO\\MÁSTER\\IA AVANZADA\\PROYECTO\\train/"
example_bike_image <- readImage(file.path(image_dir, "bike.jpg"))
example_bike_image <- readImage(file.path(image_dir, "\\bike.jpg"))
example_bike_image <- readImage(file.path(image_dir, "/bike.jpg"))
example_bike_image <- readImage(file.path(image_dir, "bike.jpg"))
example_bike_image <- readImage(file.path(image_dir, "//bike.jpg"))
example_bike_image <- readImage(file.path(image_dir, "\\bike.jpg"))
example_bike_image <- readImage(file.path(image_dir, "bike.jpg"))
example_bike_image <- readImage(file.path(image_dir, "bike.jpg"))
#Definimos el directorio donde tendremos los datasets de imagenes
image_dir <- "C:\\Users\\usuario\\Desktop\\DEUSTO\\MÁSTER\\IA AVANZADA\\PROYECTO\\train"
example_bike_image <- readImage(file.path(image_dir, "bike.jpg"))
#Definimos el directorio donde tendremos los datasets de imagenes
image_dir <- "C:\Users\\usuario\\Desktop\\DEUSTO\\MÁSTER\\IA AVANZADA\\PROYECTO\\train"
#Definimos el directorio donde tendremos los datasets de imagenes
image_dir <- "C:\\Users\\usuario\\Desktop\\DEUSTO\\MÁSTER\\IA AVANZADA\\PROYECTO\\train"
#instalar paquete
#source("https://bioconductor.org/biocLite.R")
#biocLite("EBImage")
#library(EBImage)
example_bike_image <- readImage(file.path(image_dir, ".bike.jpg"))
#instalar paquete
#source("https://bioconductor.org/biocLite.R")
#biocLite("EBImage")
#library(EBImage)
example_bike_image <- readImage(file.path(image_dir, "..", "bike.jpg"))
#instalar paquete
#source("https://bioconductor.org/biocLite.R")
#biocLite("EBImage")
#library(EBImage)
example_bike_image <- readImage(file.path(removeUps=TRUE,image_dir, "bike.jpg"))
#instalar paquete
#source("https://bioconductor.org/biocLite.R")
#biocLite("EBImage")
#library(EBImage)
example_bike_image <- readImage(file.path(fsep=.Platform$file.sep,image_dir, "bike.jpg"))
#Definimos el directorio donde tendremos los datasets de imagenes
image_dir <- "C://Users//usuario//Desktop//DEUSTO//MÁSTER//IA AVANZADA//PROYECTO//train"
#instalar paquete
#source("https://bioconductor.org/biocLite.R")
#biocLite("EBImage")
#library(EBImage)
example_bike_image <- readImage(file.path(image_dir, "bike.jpg"))
#Definimos el directorio donde tendremos los datasets de imagenes
image_dir <- "C:/Users/usuario/Desktop/DEUSTO/MÁSTER/IA AVANZADA/PROYECTO/train"
#instalar paquete
#source("https://bioconductor.org/biocLite.R")
#biocLite("EBImage")
#library(EBImage)
example_bike_image <- readImage(file.path(image_dir, "bike.jpg"))
#Definimos el directorio donde tendremos los datasets de imagenes
image_dir <- "C:/Users/usuario/Desktop"
#instalar paquete
#source("https://bioconductor.org/biocLite.R")
#biocLite("EBImage")
#library(EBImage)
example_bike_image <- readImage(file.path(image_dir, "bike.jpg"))
display(example_bike_image)
# Con los siguientes dos comandos limpiamos el entorno de trabajo y la consola
rm(list = ls())
cat("\014")
# Otro punto es establecer el working directory, con este comando hacemos que
# Ã©ste sea igual a aquÃ©l en el que se encuentra el script
# Si es tu 1Âª vez con R, tendrÃ¡s que instalar el paquete rstudioapi
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#Definimos el directorio donde tendremos los datasets de imagenes
image_dir <- "C:/Users/usuario/Desktop"
#Definimos el directorio donde tendremos los datasets de imagenes
image_dir <- "C:/Users/usuario/Desktop/DEUSTO/MASTER/IA_AVANZADA/PROYECTO/train"
#instalar paquete
#source("https://bioconductor.org/biocLite.R")
#biocLite("EBImage")
#library(EBImage)
example_bike_image <- readImage(file.path(image_dir, "bike.jpg"))
display(example_bike_image)
example_not_bike_image <- readImage(file.path(image_dir, "ambulancia.jpg"))
display(example_not_bike_image)
width <- 28
height <- 28
## pbapply is a library to add progress bar *apply functions
## pblapply will replace lapply
library(pbapply)
extract_feature <- function(dir_path, width, height, is_cat = TRUE, add_label = TRUE) {
img_size <- width*height
## List images in path
images_names <- list.files(dir_path)
if (add_label) {
## Select only cats or dogs images
images_names <- images_names[grepl(ifelse(is_cat, "cat", "dog"), images_names)]
## Set label, cat = 0, dog = 1
label <- ifelse(is_cat, 0, 1)
}
print(paste("Start processing", length(images_names), "images"))
## This function will resize an image, turn it into greyscale
feature_list <- pblapply(images_names, function(imgname) {
## Read image
img <- readImage(file.path(dir_path, imgname))
## Resize image
img_resized <- resize(img, w = width, h = height)
## Set to grayscale
grayimg <- channel(img_resized, "gray")
## Get the image as a matrix
img_matrix <- grayimg@.Data
## Coerce to a vector
img_vector <- as.vector(t(img_matrix))
return(img_vector)
})
## bind the list of vector into matrix
feature_matrix <- do.call(rbind, feature_list)
feature_matrix <- as.data.frame(feature_matrix)
## Set names
names(feature_matrix) <- paste0("pixel", c(1:img_size))
if (add_label) {
## Add label
feature_matrix <- cbind(label = label, feature_matrix)
}
return(feature_matrix)
}
View(extract_feature)
View(extract_feature)
## pbapply is a library to add progress bar *apply functions
## pblapply will replace lapply
library(lapply)
bike_data <- extract_feature(dir_path = image_dir, width = width, height = height)
# Con los siguientes dos comandos limpiamos el entorno de trabajo y la consola
rm(list = ls())
cat("\014")
# Otro punto es establecer el working directory, con este comando hacemos que
# Ã©ste sea igual a aquÃ©l en el que se encuentra el script
# Si es tu 1Âª vez con R, tendrÃ¡s que instalar el paquete rstudioapi
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#Definimos el directorio donde tendremos los datasets de imagenes
image_dir <- "C:/Users/usuario/Desktop/DEUSTO/MASTER/IA_AVANZADA/PROYECTO/train"
#Cargar foto de bici y comprobar que se visualiza correctamente
example_bike_image <- readImage(file.path(image_dir, "bike.jpg"))
display(example_bike_image)
example_not_bike_image <- readImage(file.path(image_dir, "ambulancia.jpg"))
display(example_not_bike_image)
# Con los siguientes dos comandos limpiamos el entorno de trabajo y la consola
rm(list = ls())
cat("\014")
# Otro punto es establecer el working directory, con este comando hacemos que
# Ã©ste sea igual a aquÃ©l en el que se encuentra el script
# Si es tu 1Âª vez con R, tendrÃ¡s que instalar el paquete rstudioapi
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#Definimos el directorio donde tendremos los datasets de imagenes
image_dir <- "C:/Users/usuario/Desktop/DEUSTO/MASTER/IA_AVANZADA/PROYECTO/train"
#Cargar foto de bici y comprobar que se visualiza correctamente
example_bike_image <- readImage(file.path(image_dir, "bike.jpg"))
display(example_bike_image)
width <- 28
height <- 28
extract_feature <- function(dir_path, width, height, is_bike = TRUE, add_label = TRUE) {
img_size <- width*height
## List images in path
images_names <- list.files(dir_path)
if (add_label) {
## Select only cats or dogs images
images_names <- images_names[grepl(ifelse(is_bike, "bike", "notBike"), images_names)]
## Set label, cat = 0, dog = 1
label <- ifelse(is_bike, 0, 1)
}
print(paste("Start processing", length(images_names), "images"))
## This function will resize an image, turn it into greyscale
feature_list <- pblapply(images_names, function(imgname) {
## Read image
img <- readImage(file.path(dir_path, imgname))
## Resize image
img_resized <- resize(img, w = width, h = height)
## Set to grayscale
grayimg <- channel(img_resized, "gray")
## Get the image as a matrix
img_matrix <- grayimg@.Data
## Coerce to a vector
img_vector <- as.vector(t(img_matrix))
return(img_vector)
})
## bind the list of vector into matrix
feature_matrix <- do.call(rbind, feature_list)
feature_matrix <- as.data.frame(feature_matrix)
## Set names
names(feature_matrix) <- paste0("pixel", c(1:img_size))
if (add_label) {
## Add label
feature_matrix <- cbind(label = label, feature_matrix)
}
return(feature_matrix)
}
bike_data <- extract_feature(dir_path = image_dir, width = width, height = height)
library(pbapply)
bike_data <- extract_feature(dir_path = image_dir, width = width, height = height)
library(pbapply)
library(pblapply)
library(pbapply)
install.packages("pbapply")
extract_feature <- function(dir_path, width, height, is_bike = TRUE, add_label = TRUE) {
img_size <- width*height
## List images in path
images_names <- list.files(dir_path)
if (add_label) {
## Select only cats or dogs images
images_names <- images_names[grepl(ifelse(is_bike, "bike", "notBike"), images_names)]
## Set label, cat = 0, dog = 1
label <- ifelse(is_bike, 0, 1)
}
print(paste("Start processing", length(images_names), "images"))
## This function will resize an image, turn it into greyscale
feature_list <- pblapply(images_names, function(imgname) {
## Read image
img <- readImage(file.path(dir_path, imgname))
## Resize image
img_resized <- resize(img, w = width, h = height)
## Set to grayscale
grayimg <- channel(img_resized, "gray")
## Get the image as a matrix
img_matrix <- grayimg@.Data
## Coerce to a vector
img_vector <- as.vector(t(img_matrix))
return(img_vector)
})
## bind the list of vector into matrix
feature_matrix <- do.call(rbind, feature_list)
feature_matrix <- as.data.frame(feature_matrix)
## Set names
names(feature_matrix) <- paste0("pixel", c(1:img_size))
if (add_label) {
## Add label
feature_matrix <- cbind(label = label, feature_matrix)
}
return(feature_matrix)
}
bike_data <- extract_feature(dir_path = image_dir, width = width, height = height)
# Con los siguientes dos comandos limpiamos el entorno de trabajo y la consola
rm(list = ls())
install.packages("pblapply")
install.packages("pbapply")
bike_data <- extract_feature(dir_path = image_dir, width = width, height = height)
library("pbapply", lib.loc="~/R/win-library/3.5")
install.packages("pbapply")
install.packages("pbapply")
extract_feature <- function(dir_path, width, height, is_bike = TRUE, add_label = TRUE) {
img_size <- width*height
## List images in path
images_names <- list.files(dir_path)
if (add_label) {
## Select only cats or dogs images
images_names <- images_names[grepl(ifelse(is_bike, "bike", "notBike"), images_names)]
## Set label, cat = 0, dog = 1
label <- ifelse(is_bike, 0, 1)
}
print(paste("Start processing", length(images_names), "images"))
## This function will resize an image, turn it into greyscale
feature_list <- pblapply(images_names, function(imgname) {
## Read image
img <- readImage(file.path(dir_path, imgname))
## Resize image
img_resized <- resize(img, w = width, h = height)
## Set to grayscale
grayimg <- channel(img_resized, "gray")
## Get the image as a matrix
img_matrix <- grayimg@.Data
## Coerce to a vector
img_vector <- as.vector(t(img_matrix))
return(img_vector)
})
## bind the list of vector into matrix
feature_matrix <- do.call(rbind, feature_list)
feature_matrix <- as.data.frame(feature_matrix)
## Set names
names(feature_matrix) <- paste0("pixel", c(1:img_size))
if (add_label) {
## Add label
feature_matrix <- cbind(label = label, feature_matrix)
}
return(feature_matrix)
}
bike_data <- extract_feature(dir_path = image_dir, width = width, height = height)
# Con los siguientes dos comandos limpiamos el entorno de trabajo y la consola
rm(list = ls())
cat("\014")
# Otro punto es establecer el working directory, con este comando hacemos que
# Ã©ste sea igual a aquÃ©l en el que se encuentra el script
# Si es tu 1Âª vez con R, tendrÃ¡s que instalar el paquete rstudioapi
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#Definimos el directorio donde tendremos los datasets de imagenes
image_dir <- "C:/Users/usuario/Desktop/DEUSTO/MASTER/IA_AVANZADA/PROYECTO/train"
#Cargar foto de bici y comprobar que se visualiza correctamente
example_bike_image <- readImage(file.path(image_dir, "bike.jpg"))
width <- 28
display(example_bike_image)
install.packages("pbapply")
extract_feature <- function(dir_path, width, height, is_bike = TRUE, add_label = TRUE) {
img_size <- width*height
## List images in path
images_names <- list.files(dir_path)
if (add_label) {
## Select only cats or dogs images
images_names <- images_names[grepl(ifelse(is_bike, "bike", "notBike"), images_names)]
## Set label, cat = 0, dog = 1
label <- ifelse(is_bike, 0, 1)
}
print(paste("Start processing", length(images_names), "images"))
## This function will resize an image, turn it into greyscale
feature_list <- pblapply(images_names, function(imgname) {
## Read image
img <- readImage(file.path(dir_path, imgname))
## Resize image
img_resized <- resize(img, w = width, h = height)
## Set to grayscale
grayimg <- channel(img_resized, "gray")
## Get the image as a matrix
img_matrix <- grayimg@.Data
## Coerce to a vector
img_vector <- as.vector(t(img_matrix))
return(img_vector)
})
## bind the list of vector into matrix
feature_matrix <- do.call(rbind, feature_list)
feature_matrix <- as.data.frame(feature_matrix)
## Set names
names(feature_matrix) <- paste0("pixel", c(1:img_size))
if (add_label) {
## Add label
feature_matrix <- cbind(label = label, feature_matrix)
}
return(feature_matrix)
}
height <- 28
bike_data <- extract_feature(dir_path = image_dir, width = width, height = height)
# Con los siguientes dos comandos limpiamos el entorno de trabajo y la consola
rm(list = ls())
cat("\014")
# Otro punto es establecer el working directory, con este comando hacemos que
# Ã©ste sea igual a aquÃ©l en el que se encuentra el script
# Si es tu 1Âª vez con R, tendrÃ¡s que instalar el paquete rstudioapim
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#Librerías
library(frbs)
library(ggplot2)
drivers = read.csv("csv\drivers.csv")
drivers = read.csv("csv/drivers.csv")
View(drivers)
driverStandings = read.csv("csv/driverStandings.csv")
View(driverStandings)
races = read.csv("csv/races.csv")
results = read.csv("csv/results.csv")
View(drivers)
View(driverStandings)
View(races)
circuits = read.csv("csv/circuits.csv")
View(circuits)
results = read.csv("csv/results.csv")
results = read.csv("csv/results.csv")
View(results)
View(driverStandings)
View(drivers)
#combinar csv's
merge(drivers, driverStandings, by.x = 'driverId', by.y = 'driverId')
#combinar csv's
driveStands = merge(drivers, driverStandings, by = "driverId")
View(driveStands)

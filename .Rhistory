state <- c(1,1,1)
action <- c(2,1)
for(i in 1: length(state)){
if(state[i]==action[1]){
print("Aplicaremos la acción al número correspondiente al contenido de la posición i del vector state")
for(j in 1: i){
if(state[j]==action[2] | action[2]>length(state)){
print("No se puede mover por que ya hay un disco menor en el palo destino")
return(FALSE)
}
else{
print("El disco se puede mover")
return(TRUE)
}
}
}
}
state <- c(1,1,1)
action <- c(2,1)
for(i in 1: length(state)){
if(state[i]==action[1]){
print("Aplicaremos la acción al número correspondiente al contenido de la posición i del vector state")
for(j in 1: i){
if(state[j]==action[2] | action[2]>length(state)){
print("No se puede mover por que ya hay un disco menor en el palo destino")
return(FALSE)
}
else{
print("El disco se puede mover")
return(TRUE)
}
}
}
}
state <- c(1,1,1)
action <- c(2,1)
for(i in 1: length(state)){
if(state[i]==action[1]){
print("Aplicaremos la acción al número correspondiente al contenido de la posición i del vector state")
for(j in 1: i){
if(state[j]==action[2] | action[2]>length(state)){
print("No se puede mover por que ya hay un disco menor en el palo destino")
return(FALSE)
}
else{
print("El disco se puede mover")
return(TRUE)
}
}
}
}
isApplicable = function (state,action){
state <- c(1,1,1)
action <- c(2,1)
for(i in 1: length(state)){
if(state[i]==action[1]){
print("Aplicaremos la acción al número correspondiente al contenido de la posición i del vector state")
for(j in 1: i){
if(state[j]==action[2] | action[2]>length(state)){
print("No se puede mover por que ya hay un disco menor en el palo destino")
return(FALSE)
}
else{
print("El disco se puede mover")
return(TRUE)
}
}
}
}
}
state <- c(1,1,1)
action <- c(2,1)
for(i in 1: length(state)){
if(state[i]==action[1]){
print("Aplicaremos la acción al número correspondiente al contenido de la posición i del vector state")
for(j in 1: i){
if(state[j]==action[2] | action[2]>length(state)){
print("No se puede mover por que ya hay un disco menor en el palo destino")
return(FALSE)
}
else{
print("El disco se puede mover")
return(TRUE)
}
}
}
}
isApplicable = function (state,action){
state <- c(1,1,1)
action <- c(2,1)
for(i in 1: length(state)){
if(state[i]==action[1]){
print("Aplicaremos la acción al número correspondiente al contenido de la posición i del vector state")
for(j in 1: i){
if(state[j]==action[2] | action[2]>length(state)){
print("No se puede mover por que ya hay un disco menor en el palo destino")
return(FALSE)
}
else{
print("El disco se puede mover")
return(TRUE)
}
}
}
}
}
state <- c(1,1,1)
action <- c(2,1)
for(i in 1: length(state)){
if(state[i]==action[1]){
print("Aplicaremos la acción al número correspondiente al contenido de la posición i del vector state")
for(j in 1: i){
if(state[j]==action[2] | action[2]>length(state)){
print("No se puede mover por que ya hay un disco menor en el palo destino")
return(FALSE)
}
else{
print("El disco se puede mover")
return(TRUE)
}
}
}
}
state <- c(1,1,1)
action <- c(1,2)
for(i in 1: length(state)){
if(state[i]==action[1]){
print("Aplicaremos la acción al número correspondiente al contenido de la posición i del vector state")
for(j in 1: i){
if(state[j]==action[2] | action[2]>length(state)){
print("No se puede mover por que ya hay un disco menor en el palo destino")
return(FALSE)
}
else{
print("El disco se puede mover")
return(TRUE)
}
}
}
}
state <- c(1,1,1)
action <- c(1,3)
for(i in 1: length(state)){
if(state[i]==action[1]){
print("Aplicaremos la acción al número correspondiente al contenido de la posición i del vector state")
for(j in 1: i){
if(state[j]==action[2] | action[2]>length(state)){
print("No se puede mover por que ya hay un disco menor en el palo destino")
return(FALSE)
}
else{
print("El disco se puede mover")
return(TRUE)
}
}
}
}
state <- c(1,1,1)
action <- c(3,3)
for(i in 1: length(state)){
if(state[i]==action[1]){
print("Aplicaremos la acción al número correspondiente al contenido de la posición i del vector state")
for(j in 1: i){
if(state[j]==action[2] | action[2]>length(state)){
print("No se puede mover por que ya hay un disco menor en el palo destino")
return(FALSE)
}
else{
print("El disco se puede mover")
return(TRUE)
}
}
}else{
print("Error")
}
}
state <- c(1,1,1)
action <- c(3,1)
for(i in 1: length(state)){
if(state[i]==action[1]){
print("Aplicaremos la acción al número correspondiente al contenido de la posición i del vector state")
for(j in 1: i){
if(state[j]==action[2] | action[2]>length(state)){
print("No se puede mover por que ya hay un disco menor en el palo destino")
return(FALSE)
}
else{
print("El disco se puede mover")
return(TRUE)
}
}
}else{
print("Error")
}
}
state <- c(1,1,1)
action <- c(3,1)
for(i in 1: length(state)){
if(state[i]==action[1]){
print("Aplicaremos la acción al número correspondiente al contenido de la posición i del vector state")
for(j in 1: i){
if(state[j]==action[2] | action[2]>length(state)){
print("No se puede mover por que ya hay un disco menor en el palo destino")
return(FALSE)
}
else{
print("El disco se puede mover")
return(TRUE)
}
}
}else{
print("Error, el origen de la acción es incorrecto, la acción no se puede realizar")
}
}
state <- c(1,1,1)
action <- c(3,1)
for(i in 1: length(state)){
if(state[i]==action[1]){
print("Aplicaremos la acción al número correspondiente al contenido de la posición i del vector state")
for(j in 1: i){
if(state[j]==action[2] | action[2]>length(state)){
print("No se puede mover por que ya hay un disco menor en el palo destino")
return(FALSE)
}
else{
print("El disco se puede mover")
return(TRUE)
}
}
}else{
print("Error, el origen de la acción es incorrecto, la acción no se puede realizar")
return(FALSE)
}
}
state <- c(1,1,1)
action <- c(1,1)
for(i in 1: length(state)){
if(state[i]==action[1]){
print("Aplicaremos la acción al número correspondiente al contenido de la posición i del vector state")
for(j in 1: i){
if(state[j]==action[2] | action[2]>length(state)){
print("No se puede mover por que ya hay un disco menor en el palo destino")
return(FALSE)
}
else{
print("El disco se puede mover")
return(TRUE)
}
}
}else{
print("Error, el origen de la acción es incorrecto, la acción no se puede realizar")
return(FALSE)
}
}
state <- c(1,1,1)
action <- c(1,1)
if(action[1]==action[2]){
print("El origen de la acción no puede ser igual al destino ")
}
else{
for(i in 1: length(state)){
if(state[i]==action[1]){
print("Aplicaremos la acción al número correspondiente al contenido de la posición i del vector state")
for(j in 1: i){
if(state[j]==action[2] | action[2]>length(state)){
print("No se puede mover por que ya hay un disco menor en el palo destino")
return(FALSE)
}
else{
print("El disco se puede mover")
return(TRUE)
}
}
}else{
print("Error, el origen de la acción es incorrecto, la acción no se puede realizar")
return(FALSE)
}
}
}
state <- c(1,1,1)
action <- c(1,1)
if(action[1]==action[2]){
print("El origen de la acción no puede ser igual al destino ")
return(FALSE)
}
else{
for(i in 1: length(state)){
if(state[i]==action[1]){
print("Aplicaremos la acción al número correspondiente al contenido de la posición i del vector state")
for(j in 1: i){
if(state[j]==action[2] | action[2]>length(state)){
print("No se puede mover por que ya hay un disco menor en el palo destino")
return(FALSE)
}
else{
print("El disco se puede mover")
return(TRUE)
}
}
}else{
print("Error, el origen de la acción es incorrecto, la acción no se puede realizar")
return(FALSE)
}
}
}
state <- c(1,1,1)
action <- c(1,1)
if(action[1]==action[2]){
print("El origen de la acción no puede ser igual al destino ")
return(FALSE)
}
state <- c(1,1,1)
action <- c(1,2)
if(action[1]==action[2]){
print("El origen de la acción no puede ser igual al destino ")
return(FALSE)
}
state <- c(1,1,1)
action <- c(1,2)
if(action[1]==action[2]){
print("El origen de la acción no puede ser igual al destino ")
return(FALSE)
}
else{
for(i in 1: length(state)){
if(state[i]==action[1]){
print("Aplicaremos la acción al número correspondiente al contenido de la posición i del vector state")
for(j in 1: i){
if(state[j]==action[2] | action[2]>length(state)){
print("No se puede mover")
return(FALSE)
}
else{
print("El disco se puede mover")
return(TRUE)
}
}
}else{
print("Error, el origen de la acción es incorrecto, la acción no se puede realizar")
return(FALSE)
}
}
}
state <- c(1,1,1)
action <- c(1,3)
if(action[1]==action[2]){
print("El origen de la acción no puede ser igual al destino ")
return(FALSE)
}
else{
for(i in 1: length(state)){
if(state[i]==action[1]){
print("Aplicaremos la acción al número correspondiente al contenido de la posición i del vector state")
for(j in 1: i){
if(state[j]==action[2] | action[2]>length(state)){
print("No se puede mover")
return(FALSE)
}
else{
print("El disco se puede mover")
return(TRUE)
}
}
}else{
print("Error, el origen de la acción es incorrecto, la acción no se puede realizar")
return(FALSE)
}
}
}
state <- c(1,1,1)
action <- c(2,3)
if(action[1]==action[2]){
print("El origen de la acción no puede ser igual al destino ")
return(FALSE)
}
else{
for(i in 1: length(state)){
if(state[i]==action[1]){
print("Aplicaremos la acción al número correspondiente al contenido de la posición i del vector state")
for(j in 1: i){
if(state[j]==action[2] | action[2]>length(state)){
print("No se puede mover")
return(FALSE)
}
else{
print("El disco se puede mover")
return(TRUE)
}
}
}else{
print("Error, el origen de la acción es incorrecto, la acción no se puede realizar")
return(FALSE)
}
}
}
firstnode = frontier[[1]]
frontier[[1]] = NULL
frontier = list(node)
node = list()
node$state = initialstate
node$actions = c(0,0)
startTime<-Sys.time() #Hora actual de inicio
print(startTime)
startTime<-Sys.time() #Hora actual de inicio
print(startTime)
print(a)
startTime<-Sys.time() #Hora actual de inicio
print(startTime)
print("a")
endTime<-Sys.time()
print(endTime)
startTime<-Sys.time() #Hora actual de inicio
print(startTime)
print("a")
endTime<-Sys.time()
print(endTime)
timeTaken <-endTime - startTime #Tiempo que tarda el programa en ejecutarse; final - inicio
print(timeTaken)
View(h)
View(m)
View(mat)
View(matrix)
View(toString)
ndisks = 4
nrods = 3
matrix = matrix(0:0,nrow=ndisks, ncol=nrods) #llenamos la matriz de ceros
for(i in 1: ndisks){ #recorremos las filas de la matriz desde 1 hasta num discos
for(j in 1: nrods){ #recorremos las columnas de la matriz desde 1 hasta num palos
if(state[j] == i){
matrix[j,i] <- j #insertamos en la posicion[j, i] el valor del disco
}
}
}
m=apply(matrix, 2, sort) #aplica una funci?n a los m?rgenes de una matriz; ordena
state <- c(1,1,1,1)
ndisks = 4
nrods = 3
matrix = matrix(0:0,nrow=ndisks, ncol=nrods) #llenamos la matriz de ceros
for(i in 1: ndisks){ #recorremos las filas de la matriz desde 1 hasta num discos
for(j in 1: nrods){ #recorremos las columnas de la matriz desde 1 hasta num palos
if(state[j] == i){
matrix[j,i] <- j #insertamos en la posicion[j, i] el valor del disco
}
}
}
m=apply(matrix, 2, sort) #aplica una funci?n a los m?rgenes de una matriz; ordena
print(m) #imprimimos la matriz
library("ggplot2", lib.loc="~/R/win-library/3.5")
install.packages("ggplot2")
install.packages("tidyverse")
# Paso 3, definir una matriz con el número de etiquetas de cada entrada
#definimos una matriz de
num.fvalinput = matrix(c(3,3), nrow=1)
View(num.fvalinput)
shiny::runApp('C:/Users/usuario/Desktop/DEUSTO/MASTER/AIProject')
